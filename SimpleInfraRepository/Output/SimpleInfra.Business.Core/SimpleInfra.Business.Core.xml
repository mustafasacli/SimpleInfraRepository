<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInfra.Business.Core</name>
    </assembly>
    <members>
        <member name="T:SimpleInfra.Business.Core.SimpleBaseBusiness`2">
            <summary>
            Gsb Base Business class.
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:SimpleInfra.Business.Core.SimpleBaseBusiness`2.Repository">
            <summary>
            Base Repository
            </summary>
        </member>
        <member name="P:SimpleInfra.Business.Core.SimpleBaseBusiness`2.SimpleUnitOfWork">
            <summary>
            
            </summary>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.GetRepository">
            <summary>
            Creates new repository.
            </summary>
            <returns>TRepository instance</returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.#ctor">
            <summary>
            protected constructor
            </summary>
        </member>
        <member name="P:SimpleInfra.Business.Core.SimpleBaseBusiness`2.Logger">
            <summary>
            Gets Logger instance.
            </summary>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.GetInstance``1">
            <summary>
            Gets Instance of class.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.InsertInternal(`0,System.Boolean)">
            <summary>
            Insert record internally.
            Dto nesnesini, entity nesnesine dönüştürüp veritabanına kaydeder.
            sonuç olarak SimpleResponse{Dto} nesnesini döner.
            </summary>
            <param name="dto"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.InsertInternalDontReturnDto(`0,System.Boolean)">
            <summary>
            Insert record internally.
            Dto nesnesini, entity nesnesine dönüştürüp veritabanına kaydeder.
            sonuç olarak SimpleResponse nesnesini döner.
            </summary>
            <param name="dto"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.InsertRangeInternal(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Inserts records internally.
            </summary>
            <param name="dtoList"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.UpdateInternal(`0,System.Boolean)">
            <summary>
            Update record internally.
            </summary>
            <param name="dto"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.UpdateRangeInternal(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Updates records internally.
            </summary>
            <param name="dtoList"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.DeleteInternal(`0,System.Boolean)">
            <summary>
            Delete record internally.
            </summary>
            <param name="dto"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.DeleteRangeInternal(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Deletes records internally.
            </summary>
            <param name="dtoList"></param>
            <param name="autoSave"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.ReadAllInternal">
            <summary>
            Reads all records as internally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.ReadSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)">
            <summary>
            Return single entity for given predicate.
            </summary>
            <param name="predicate"></param>
            <param name="asNoTracking"></param>
            <returns>returns entity instance if predicate condition true.</returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.ReadDtoSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Return single dto for given predicate.
            </summary>
            <param name="predicate"></param>
            <returns>returns dto instance if predicate condition true.</returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.ReadFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)">
            <summary>
            Return first entity for given predicate.
            </summary>
            <param name="predicate"></param>
            <param name="asNoTracking"></param>
            <returns>returns first entity instance if predicate condition true.</returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.ReadDtoFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Return first dto for given predicate.
            </summary>
            <param name="predicate"></param>
            <returns>returns first dto instance if predicate condition true.</returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.Map(`1)">
            <summary>
            Maps entity to data transfer object.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.MapReverse(`0)">
            <summary>
            Maps data transfer object to entity.
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.MapTo(`1,`0)">
            <summary>
            Maps entity to data transfer object.
            </summary>
            <param name="entity"></param>
            <param name="dto"></param>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.MapToReverse(`0,`1)">
            <summary>
            Maps data transfer object to entity.
            </summary>
            <param name="entity"></param>
            <param name="dto"></param>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.MapList(System.Collections.Generic.List{`1})">
            <summary>
            Maps entity list to data transfer object list.
            </summary>
            <param name="entityList"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.MapListReverse(System.Collections.Generic.List{`0})">
            <summary>
            Maps data transfer object list to entity list.
            </summary>
            <param name="entityList"></param>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.SaveChanges">
            <summary>
            Saves changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SimpleInfra.Business.Core.SimpleBaseBusiness`2.Dispose">
            <summary>
            Disposes object.
            </summary>
        </member>
    </members>
</doc>
